---
import EventsPage from "../../components/EventsPage.astro";
import { getEvents } from "../../data";

export async function getStaticPaths() {
  // Get all events to extract unique cities and topics
  const events = await getEvents();
  const cities = new Set<string>();
  const topics = new Set<string>();

  events.forEach((event) => {
    if (event.venue?.city) {
      cities.add(event.venue.city);
    }
    
    if (event.data.topics) {
      event.data.topics.forEach((topic: string) => {
        const slug = topic.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-|-$/g, '');
        topics.add(slug);
      });
    }
  });

  const cityPaths = Array.from(cities).map((city) => ({
    params: { filters: `location/${encodeURIComponent(city)}` },
    props: { filterType: "location", filterValue: city },
  }));

  const topicPaths = Array.from(topics).map((topic) => ({
    params: { filters: `topic/${topic}` },
    props: { filterType: "topic", filterValue: topic },
  }));

  return [
    { params: { filters: undefined } },
    { params: { filters: "gallery" } },
    ...cityPaths,
    ...topicPaths,
  ];
}

const { filters } = Astro.params;
const { filterType, filterValue } = Astro.props;

// Parse filters from URL
let parsedFilterType = filterType;
let parsedFilterValue = filterValue;

if (filters && !parsedFilterType) {
  const parts = filters.split("/");
  if (parts[0] === "location" && parts[1]) {
    parsedFilterType = "location";
    parsedFilterValue = decodeURIComponent(parts[1]);
  } else if (parts[0] === "topic" && parts[1]) {
    parsedFilterType = "topic";
    parsedFilterValue = parts[1];
  }
}
---

<EventsPage filterType={parsedFilterType} filterValue={parsedFilterValue} />
