---
import EventsPage from "../../components/EventsPage.astro";
import { generateEventRoutePaths } from "../../utils/sitemap";

export async function getStaticPaths() {
  const { paths } = await generateEventRoutePaths();

  // Convert paths to the format needed for Astro's getStaticPaths
  return paths.map((path) => {
    // Remove leading /events/ to get the eventsPath parameter
    const eventsPath = path === "/events" ? undefined : path.replace(/^\/events\//, "");

    return { params: { eventsPath } };
  });
}

// Parse the path to determine view and filter
const { eventsPath } = Astro.params;
const segments = eventsPath ? eventsPath.split("/") : [];

let viewMode: "default" | "compact" | "gallery" = "default";
let filterType: string | undefined;
let filterValue: string | undefined;

// Parse segments
if (segments.length > 0) {
  // Check if first segment is a view mode
  if (["compact", "gallery"].includes(segments[0])) {
    viewMode = segments[0] as "compact" | "gallery";
    segments.shift(); // Remove view from segments
  }

  // Check for filter
  if (segments.length >= 2) {
    filterType = segments[0]; // "topic" or "location"
    filterValue = segments[1];
  }
}
---

<EventsPage viewMode={viewMode} filterType={filterType} filterValue={filterValue} />
