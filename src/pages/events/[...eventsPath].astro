---
import EventsPage from "../../components/EventsPage.astro";
import { getEvents } from "../../data";

export async function getStaticPaths() {
  const events = await getEvents();

  // Get all unique topics
  const topicsSet = new Set<string>();
  events.forEach((event) => {
    if (event.data.topics) {
      event.data.topics.forEach((topic: string) => {
        const slug = topic
          .toLowerCase()
          .replace(/[^a-z0-9]+/g, "-")
          .replace(/^-|-$/g, "");
        topicsSet.add(slug);
      });
    }
  });

  // Get all unique cities
  const citiesSet = new Set<string>();
  events.forEach((event) => {
    if (event.venue?.city) {
      citiesSet.add(event.venue.city);
    }
  });

  const paths: { params: { eventsPath: string | undefined } }[] = [];
  const views = ["", "compact", "gallery"]; // "" represents default view

  // Base paths for each view
  views.forEach((view) => {
    if (view === "") {
      paths.push({ params: { eventsPath: undefined } });
    } else {
      paths.push({ params: { eventsPath: view } });
    }
  });

  // Topic filter paths
  views.forEach((view) => {
    topicsSet.forEach((topic) => {
      const pathSegments = view ? [view, "topic", topic] : ["topic", topic];
      paths.push({ params: { eventsPath: pathSegments.join("/") } });
    });
  });

  // Location filter paths
  views.forEach((view) => {
    citiesSet.forEach((city) => {
      const pathSegments = view ? [view, "location", city] : ["location", city];
      paths.push({ params: { eventsPath: pathSegments.join("/") } });
    });
  });

  return paths;
}

// Parse the path to determine view and filter
const { eventsPath } = Astro.params;
const segments = eventsPath ? eventsPath.split("/") : [];

let viewMode: "default" | "compact" | "gallery" = "default";
let filterType: string | undefined;
let filterValue: string | undefined;

// Parse segments
if (segments.length > 0) {
  // Check if first segment is a view mode
  if (["compact", "gallery"].includes(segments[0])) {
    viewMode = segments[0] as "compact" | "gallery";
    segments.shift(); // Remove view from segments
  }

  // Check for filter
  if (segments.length >= 2) {
    filterType = segments[0]; // "topic" or "location"
    filterValue = segments[1];
  }
}
---

<EventsPage viewMode={viewMode} filterType={filterType} filterValue={filterValue} />
