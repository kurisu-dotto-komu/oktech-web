---
import Container from "@/components/Common/Container.astro";

interface Props {
  navigationClass: string;
}

const { navigationClass } = Astro.props;

// Generate a unique ID for this instance
const stickyNavId = `sticky-nav-${Math.random().toString(36).substring(7)}`;
---

<!-- Sticky Navigation -->
<div
  id={stickyNavId}
  class="fixed bottom-0 left-0 right-0 z-40 soft-glass transition-opacity duration-300"
>
  <Container class="py-2">
    <slot />
  </Container>
</div>

<script is:inline define:vars={{ stickyNavId, navigationClass }}>
  (() => {
    // Get the sticky nav element
    const stickyNav = document.getElementById(stickyNavId);
    if (!stickyNav) return;

    // Get the bottom navigation element
    const bottomNav = document.querySelector(`.${navigationClass}`);

    if (!bottomNav) return;

    let hasScrolledPast = false;

    // Create an intersection observer to watch when the bottom nav comes into view
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          // Get the position of the navigation relative to the viewport
          const navRect = entry.boundingClientRect;

          // Check if we've scrolled past the navigation (it's above the viewport)
          if (navRect.bottom < 0) {
            hasScrolledPast = true;
          } else if (navRect.top >= 0) {
            // Navigation is in view or below viewport
            hasScrolledPast = false;
          }

          if (entry.isIntersecting) {
            // Fade out when bottom nav is visible
            stickyNav.style.opacity = "0";
            stickyNav.style.pointerEvents = "none";
          } else if (!hasScrolledPast) {
            // Only fade in when bottom nav is not visible AND we haven't scrolled past it
            stickyNav.style.opacity = "1";
            stickyNav.style.pointerEvents = "auto";
          } else {
            // Keep hidden if we've scrolled past the navigation
            stickyNav.style.opacity = "0";
            stickyNav.style.pointerEvents = "none";
          }
        });
      },
      {
        // Trigger when the element is 50px from the bottom of the viewport
        rootMargin: "0px 0px 50px 0px",
        threshold: 0,
      },
    );

    // Start observing the bottom navigation
    observer.observe(bottomNav);
  })();
</script>
