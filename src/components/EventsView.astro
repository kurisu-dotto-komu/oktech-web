---
import { getEvents } from "../data";
import EventsFilterWrapper from "./EventsFilter/EventsFilterWrapper.astro";
import EventsViewGrid from "./EventsViewGrid.astro";
import EventsViewCompact from "./EventsViewCompact.astro";
import EventsViewGallery from "./EventsViewGallery.astro";
import Section from "./Section.astro";

export interface Props {
  view: string;
  search: string;
  topics: string[];
  location: string;
  sort: string;
}

const { view, search, topics, location, sort } = Astro.props;

// Get all events
const allEvents = await getEvents();

// Extract unique topics and locations for filters
const allTopics = new Set<string>();
const allLocations = new Set<string>();

allEvents.forEach((event) => {
  event.data.topics?.forEach((topic) => allTopics.add(topic));
  if (event.venue?.city) allLocations.add(event.venue.city);
});

// Prepare data for client-side
const collectionData = {
  items: allEvents.map((event) => ({
    id: event.id,
    title: event.data.title,
    description: event.data.description,
    date: event.data.dateTime,
    topics: event.data.topics || [],
    location: event.venue?.city || "",
    venue: event.venue,
    poster: event.data.poster,
    slug: event.id,
  })),
  filters: {
    topics: Array.from(allTopics).sort(),
    locations: Array.from(allLocations).sort(),
  },
};

// Sort options for events (only date)
const sortOptions = [
  { value: "date-desc", label: "Newest First" },
  { value: "date-asc", label: "Oldest First" },
];
---

<style>
  /* Hide filters by default (no-JS fallback) */
  #collection-filter-wrapper {
    display: none;
  }
  /* Show filters when JS is enabled */
  html.js #collection-filter-wrapper {
    display: block;
  }
  /* Initially hide everything to prevent any flicker */
  #collection-container {
    opacity: 0;
  }
  /* Also hide the active filters container initially */
  #active-filters-container {
    opacity: 0;
  }
</style>

<script is:inline>
  // This runs immediately before anything else
  document.documentElement.classList.add("js");
</script>

<Section class="text-center mb-8">
  <h1 class="text-4xl font-bold mb-4">Events</h1>
  <p class="text-lg text-base-content/70">Discover and join our community events</p>
</Section>

<div class="container mx-auto px-4">
  <div id="collection-filter-wrapper">
    <EventsFilterWrapper
      items={collectionData.items}
      currentFilters={{
        search,
        topics,
        location,
        sort,
        view,
      }}
      availableFilters={collectionData.filters}
      sortOptions={sortOptions}
    />
  </div>

  <div
    id="collection-container"
    data-collection="events"
    data-items={JSON.stringify(collectionData.items)}
    data-current-filters={JSON.stringify({ search, topics, location, sort, view })}
    data-available-filters={JSON.stringify(collectionData.filters)}
    data-sort-options={JSON.stringify(sortOptions)}
  >
    {view === "compact" && <EventsViewCompact events={allEvents} />}
    {view === "gallery" && <EventsViewGallery events={allEvents} />}
    {(!view || view === "grid") && <EventsViewGrid events={allEvents} />}
  </div>
</div>

<script is:inline data-collection-items={JSON.stringify(collectionData.items)}>
  // This runs immediately, blocking render to prevent flicker
  (function () {
    console.log("[EventsView inline script] Initial URL:", window.location.href);
    // Get URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const filters = {
      search: urlParams.get("search") || "",
      topics: urlParams.get("topics")?.split(",").filter(Boolean) || [],
      location: urlParams.get("location") || "",
      sort: urlParams.get("sort") || "date-desc",
    };

    // Store filters globally for other scripts
    window.__initialFilters = filters;

    // Get items data from script tag
    const scriptTag = document.currentScript;
    const items = JSON.parse(scriptTag.dataset.collectionItems);

    // Quick filter function
    let filtered = items;

    // Apply filters
    if (filters.topics.length > 0) {
      filtered = filtered.filter((item) =>
        item.topics?.some((topic) => filters.topics.includes(topic)),
      );
    }

    if (filters.location) {
      filtered = filtered.filter(
        (item) => item.location?.toLowerCase() === filters.location.toLowerCase(),
      );
    }

    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      filtered = filtered.filter(
        (item) =>
          item.title.toLowerCase().includes(searchLower) ||
          item.description?.toLowerCase().includes(searchLower),
      );
    }

    // Apply sorting
    if (filters.sort === "date-asc") {
      filtered.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
    } else {
      filtered.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());
    }

    // Create a set of visible IDs
    const visibleIds = new Set(filtered.map((item) => item.id));

    // Process DOM as soon as it's ready
    function processItems() {
      const container = document.getElementById("collection-container");
      if (!container) {
        // If container doesn't exist yet, wait a bit
        setTimeout(processItems, 10);
        return;
      }

      const items = container.querySelectorAll("[data-item-id]");
      if (items.length === 0) {
        // If items aren't rendered yet, wait a bit
        setTimeout(processItems, 10);
        return;
      }

      const itemsMap = new Map();

      // First pass: hide non-matching items
      items.forEach((item) => {
        const id = item.getAttribute("data-item-id");
        itemsMap.set(id, item);
        if (!visibleIds.has(id)) {
          item.style.display = "none";
        }
      });

      // Second pass: reorder visible items
      if (filtered.length > 0 && items[0]) {
        const parent = items[0].parentElement;
        const fragment = document.createDocumentFragment();

        // Append in sorted order
        filtered.forEach((item) => {
          const element = itemsMap.get(item.id);
          if (element) {
            fragment.appendChild(element);
          }
        });

        // Append hidden items at the end
        items.forEach((element) => {
          if (element.style.display === "none") {
            fragment.appendChild(element);
          }
        });

        parent.appendChild(fragment);
      }

      // Show the container with transition
      container.style.transition = "opacity 0.2s";
      container.style.opacity = "1";

      // Also show active filters if they exist
      const activeFiltersContainer = document.getElementById("active-filters-container");
      if (activeFiltersContainer) {
        activeFiltersContainer.style.transition = "opacity 0.2s";
        activeFiltersContainer.style.opacity = "1";
      }
    }

    // Start processing immediately
    processItems();
  })();
</script>
