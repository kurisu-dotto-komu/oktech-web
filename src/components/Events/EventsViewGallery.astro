---
import { getCollection } from "astro:content";
import EventFeatured from "@/components/Event/EventFeatured.astro";
import EventGalleryImages from "@/components/Event/EventGalleryImages.astro";
import Grid from "@/components/Common/Grid.astro";
import { Icon } from "astro-icon/components";

import type { EventsArray } from "@/data";

interface Props {
  events: EventsArray;
}

const { events } = Astro.props;

// Get all gallery images to determine which events have galleries
const allGalleryImages = await getCollection("eventGalleryImage");

// Create a Set of event IDs that have gallery images
const eventsWithGallery = new Set(allGalleryImages.map((img) => img.data.event.id));

// Count events without galleries
const eventsWithoutGalleryCount = events.filter((event) => !eventsWithGallery.has(event.id)).length;
---

<div class="space-y-8">
  {
    eventsWithoutGalleryCount > 0 && (
      <div class="container mx-auto px-4">
        <div class="alert alert-info">
          <Icon name="lucide:info" class="w-6 h-6" />
          <span>
            Hiding {eventsWithoutGalleryCount} event{eventsWithoutGalleryCount !== 1 ? "s" : ""}{" "}
            that don't have a gallery
          </span>
        </div>
      </div>
    )
  }
  {
    events.map((event, i) => {
      const hasGallery = eventsWithGallery.has(event.id);

      return (
        <div
          data-item-id={event.slug || event.id}
          class:list={[!hasGallery ? "hidden" : ["transition-all", "duration-200", "py-8", i % 2 === 0 ? "" : "bg-base-100/50"]]}
        >
          {hasGallery && (
            <div class="container mx-auto px-4">
              <div class="flex flex-col gap-12">
                <EventFeatured eventSlug={event.id} />
                <Grid>
                  <EventGalleryImages eventSlug={event.id} />
                </Grid>
              </div>
            </div>
          )}
        </div>
      );
    })
  }
</div>
