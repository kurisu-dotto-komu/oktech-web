---
import VenueMapImage from "./VenueMapImage.astro";
import { resolveVenue } from "@/data";

interface Props {
  venueSlug?: string;
  marker?: boolean | string;
  link?: boolean;
}

const { marker, link = false } = Astro.props;

const venue = await resolveVenue(Astro);

// Generate map URL - use gmaps if available, otherwise create from address
const getMapUrl = () => {
  if (!venue) return null;
  // Show link if either showMarker is true or marker prop is provided
  if (marker === undefined) return null;

  if (venue.data.gmaps) {
    return venue.data.gmaps;
  }
  if (venue.data.coordinates?.lat && venue.data.coordinates?.lng) {
    return `https://www.google.com/maps/search/?api=1&query=${venue.data.coordinates.lat},${venue.data.coordinates.lng}`;
  }

  if (venue.data.address) {
    return `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(venue.data.address)}`;
  }
  return null;
};

const mapUrl = getMapUrl();

let mapImage;
try {
  // Try to dynamically import the map.png for this venue
  mapImage = await import(`../../../content/venues/${venue.id}/map.jpg`);
} catch (error) {
  // If map.png doesn't exist, mapImage will remain undefined
  mapImage = null;
}
---

{
  mapUrl && link ? (
    <a
      href={mapUrl}
      target="_blank"
      rel="noopener noreferrer"
      class="block w-full h-full hover:opacity-90 transition-opacity cursor-pointer"
    >
      <VenueMapImage mapImage={mapImage} marker={marker} />
    </a>
  ) : (
    <VenueMapImage mapImage={mapImage} marker={marker} />
  )
}
