---
import EventsFilter from "./EventsFilter.astro";
import SearchBox from "./SearchBox.astro";
import { getEvents } from "../data";
import EventSummary from "./EventSummary.astro";
import Grid from "./Grid.astro";
import Button from "./Button.astro";
import PageLayout from "../layouts/PageLayout.astro";
import Section from "./Section.astro";
import EventsUpcoming from "./EventsUpcoming.astro";
import EventFeatured from "./EventFeatured.astro";
import EventGallery from "./EventGallery.astro";

interface Props {
  filterType?: string;
  filterValue?: string;
}

const { filterType, filterValue } = Astro.props;
const { filters } = Astro.params;

// Get all events
let events = await getEvents();

// Apply filters
if (filterType === "location" && filterValue) {
  events = events.filter((event) => event.venue?.city === filterValue);
} else if (filterType === "topic" && filterValue) {
  events = events.filter((event) => {
    if (!event.data.topics) return false;
    return event.data.topics.some((topic: string) => {
      const slug = topic
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-|-$/g, "");
      return slug === filterValue;
    });
  });
}

const gallery = filters === "gallery";
const selectedCity = filterType === "location" ? filterValue : undefined;
const selectedTopic = filterType === "topic" ? filterValue : undefined;
---

<PageLayout title="Events">
  {
    !filterType && (
      <Section wide class="bg-secondary/20">
        <EventsUpcoming />
      </Section>
    )
  }
  <Section wide class="pb-0">
    <div class="flex flex-col gap-8">
      <div class="flex items-center justify-between gap-8 flex-col md:flex-row">
        <EventsFilter selectedCity={selectedCity} selectedTopic={selectedTopic} />
        <div class="flex items-center gap-4">
          <Button
            class="btn btn-lg gap-4"
            text={gallery ? "List" : "Gallery"}
            href={gallery ? "/events" : "/events/gallery"}
            icon={gallery ? "lucide:grid" : "lucide:image"}
          />
          <SearchBox />
        </div>
      </div>
    </div>
  </Section>

  {
    gallery ? (
      <>
        {events.map((event, i) => (
          <Section wide class:list={i % 2 === 0 ? "" : "bg-base-100/50"}>
            <div class="flex flex-col gap-12">
              <EventFeatured slug={event.id} />
              <Grid>
                <EventGallery slug={event.id} />
              </Grid>
            </div>
          </Section>
        ))}
      </>
    ) : (
      <Section grid wide>
        {events.map((event) => (
          <div>
            <EventSummary slug={event.id} />
          </div>
        ))}
      </Section>
    )
  }
</PageLayout>
