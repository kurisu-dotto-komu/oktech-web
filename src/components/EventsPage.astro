---
import EventsFilter from "./EventsFilter.astro";
import SearchBox from "./SearchBox.astro";
import { getEvents } from "../data";
import PageLayout from "../layouts/PageLayout.astro";
import Section from "./Section.astro";
import ButtonGroup from "./ButtonGroup.astro";
import EventsViewGallery from "./EventsViewGallery.astro";
import EventsViewGrid from "./EventsViewGrid.astro";
import EventsViewCompact from "./EventsViewCompact.astro";

interface Props {
  filterType?: string;
  filterValue?: string;
}

const { filterType, filterValue } = Astro.props;
const { filters } = Astro.params;

// Get all events
let events = await getEvents();

// Apply filters
if (filterType === "location" && filterValue) {
  events = events.filter((event) => event.venue?.city === filterValue);
} else if (filterType === "topic" && filterValue) {
  events = events.filter((event) => {
    if (!event.data.topics) return false;
    return event.data.topics.some((topic: string) => {
      const slug = topic
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-|-$/g, "");
      return slug === filterValue;
    });
  });
}

const gallery = filters === "gallery";
const compact = filters === "compact";
const selectedCity = filterType === "location" ? filterValue : undefined;
const selectedTopic = filterType === "topic" ? filterValue : undefined;

// Determine current view mode
let viewMode = "default";
if (gallery) viewMode = "gallery";
if (compact) viewMode = "compact";
---

<PageLayout title="Events">
  <Section wide>
    <div class="flex flex-col gap-8">
      <div class="flex items-center justify-between gap-8 flex-col md:flex-row">
        <EventsFilter selectedCity={selectedCity} selectedTopic={selectedTopic} />
        <div class="flex items-center gap-4">
          <ButtonGroup
            buttons={[
              {
                href: "/events",
                icon: "lucide:grid-3x3",
                value: "default",
                title: "Grid view",
              },
              {
                href: "/events/compact",
                icon: "lucide:list",
                value: "compact",
                title: "Compact view",
              },
              {
                href: "/events/gallery",
                icon: "lucide:image",
                value: "gallery",
                title: "Gallery view",
              },
            ]}
            active={viewMode}
          />
          <SearchBox />
        </div>
      </div>
    </div>
  </Section>

  {
    viewMode === "gallery" ? (
      <EventsViewGallery events={events} />
    ) : viewMode === "compact" ? (
      <EventsViewCompact events={events} />
    ) : (
      <EventsViewGrid events={events} />
    )
  }
</PageLayout>
