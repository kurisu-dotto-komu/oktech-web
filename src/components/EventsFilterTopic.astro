---
import { getEvents } from "../data";
import EventsFilterDropdown from "./EventsFilterDropdown.astro";

interface Props {
  selectedTopic?: string;
  viewMode?: "default" | "compact" | "gallery";
}

const { selectedTopic, viewMode = "default" } = Astro.props;

// Get all events to extract unique topics and count events per topic
const events = await getEvents();
const topicsMap = new Map<string, string>(); // slug -> original name
const topicCounts = new Map<string, number>(); // slug -> count

events.forEach((event) => {
  if (event.data.topics) {
    event.data.topics.forEach((topic: string) => {
      const slug = topic
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, "-")
        .replace(/^-|-$/g, "");
      topicsMap.set(slug, topic);
      topicCounts.set(slug, (topicCounts.get(slug) || 0) + 1);
    });
  }
});

const sortedTopics = Array.from(topicsMap.entries())
  .sort((a, b) => {
    const countA = topicCounts.get(a[0]) || 0;
    const countB = topicCounts.get(b[0]) || 0;
    // First sort by count descending
    if (countB !== countA) return countB - countA;
    // If counts are equal, sort alphabetically by topic name
    return a[1].localeCompare(b[1]);
  });

// Helper function to generate URLs with current view mode
function getTopicUrl(slug: string): string {
  const viewPath = viewMode === "default" ? "/events" : `/events/${viewMode}`;
  return `${viewPath}/topic/${slug}`;
}

function getClearUrl(): string {
  return viewMode === "default" ? "/events" : `/events/${viewMode}`;
}
---

<EventsFilterDropdown
  buttonText={selectedTopic ? topicsMap.get(selectedTopic) || selectedTopic : "Topic"}
  buttonIcon="lucide:tag"
  clearText={selectedTopic ? "All Topics" : undefined}
  clearHref={selectedTopic ? getClearUrl() : undefined}
  items={sortedTopics.map(([slug, name]) => ({
    href: getTopicUrl(slug),
    text: name,
    count: topicCounts.get(slug),
  }))}
/>
